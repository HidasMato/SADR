{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../src/queue.ts"],"names":[],"mappings":"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","sourcesContent":["/** A double-ended queue. All queue operations are `O(1)`. */\nexport class Queue<T> {\n    #head = 0;\n    #tail = 0;\n    #capacityMask = 0b11;\n    #list: (T | undefined)[] = new Array(this.#capacityMask + 1);\n\n    /** Returns the current number of elements in the queue. */\n    get length() {\n        return this.#head <= this.#tail ?\n                this.#tail - this.#head\n            :   this.#capacityMask + 1 - (this.#head - this.#tail);\n    }\n\n    /** Returns whether the deque is empty. */\n    get empty() {\n        return this.#head === this.#tail;\n    }\n\n    /** Inserts item to first slot. Returns the new length of the deque. */\n    unshift(item: T) {\n        const len = this.#list.length;\n        this.#head = (this.#head - 1 + len) & this.#capacityMask;\n        this.#list[this.#head] = item;\n        if (this.#tail === this.#head) this.growArray();\n        if (this.#head < this.#tail) return this.#tail - this.#head;\n        return this.#capacityMask + 1 - (this.#head - this.#tail);\n    }\n\n    /** Removes and returns the first element. */\n    shift(): T {\n        const item = this.shiftMaybe();\n        if (item !== undefined) return item;\n        throw new Error('Queue is empty');\n    }\n\n    /** Removes and returns the first element or undefined.  */\n    shiftMaybe(): T | undefined {\n        if (this.empty) return;\n\n        const head = this.#head;\n        const item = this.#list[head];\n        this.#list[head] = undefined;\n        this.#head = (head + 1) & this.#capacityMask;\n\n        if (\n            head < 2 &&\n            this.#tail > 10000 &&\n            this.#tail <= this.#list.length >>> 2\n        )\n            this.shrinkArray();\n\n        return item;\n    }\n\n    expect(expected?: T): T {\n        const item = this.shift();\n        if (\n            item === undefined ||\n            (expected !== undefined && expected !== item)\n        ) {\n            throw new Error(`Unexpected item: ${item} !== ${expected}`);\n        }\n        return item;\n    }\n\n    /** Inserts item to the last slot. Returns the new length of the deque. */\n    push(item: T) {\n        const tail = this.#tail;\n        this.#list[tail] = item;\n        this.#tail = (tail + 1) & this.#capacityMask;\n\n        if (this.empty) this.growArray();\n\n        if (this.#head < this.#tail) return this.#tail - this.#head;\n\n        return this.#capacityMask + 1 - (this.#head - this.#tail);\n    }\n\n    private shrinkArray() {\n        this.#list.length >>>= 1;\n        this.#capacityMask >>>= 1;\n    }\n\n    private growArray() {\n        // Perform rotate-left if necessary\n        if (this.#head > 0) {\n            // Copy existing data from head to end\n            const deleted = this.#list.splice(this.#head);\n\n            // Then, plop all preceding elements after `deleted`\n            deleted.push(...this.#list);\n\n            // Shift pointers accordingly\n            this.#tail -= this.#head;\n            this.#head = 0;\n\n            // Discard old array\n            this.#list = deleted;\n        }\n\n        // Head is at 0 and array is now full,\n        // therefore safe to extend\n        this.#tail = this.#list.length;\n\n        // Double the capacity\n        this.#list.length *= 2;\n        this.#capacityMask = (this.#capacityMask << 1) | 1;\n    }\n}\n"]}