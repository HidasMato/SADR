{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { Buffer } from 'node:buffer';\nimport { randomBytes } from 'node:crypto';\nimport { constants } from 'node:os';\nimport { env, nextTick } from 'node:process';\nimport { Socket } from 'node:net';\nimport { Writable } from 'node:stream';\nimport {\n    ConnectionOptions,\n    TLSSocket,\n    connect as tls,\n    createSecureContext,\n} from 'node:tls';\nimport { EventEmitter } from 'node:events';\n\nimport { Defaults } from './defaults.js';\nimport * as logger from './logging.js';\n\nimport { postgresqlErrorCodes } from './errors.js';\nimport { Queue } from './queue.js';\nimport { Query } from './query.js';\n\nimport {\n    DataHandler,\n    ResultIterator,\n    ResultRecord,\n    makeResult,\n} from './result.js';\n\nimport {\n    ClientConnectionDefaults,\n    ClientConnectionOptions,\n    DatabaseError,\n    ErrorLevel,\n    Message,\n    Reader,\n    RowDescription,\n    SSLResponseCode,\n    TransactionStatus,\n    Writer,\n} from './protocol.js';\n\nimport {\n    BufferEncoding,\n    DataFormat,\n    DataType,\n    ValueTypeReader,\n} from './types.js';\n\nimport { md5 } from './utils.js';\n\nexport interface ConnectionInfo {\n    encrypted: boolean;\n    parameters: ReadonlyMap<string, string>;\n}\n\nexport interface ClientNotice extends DatabaseError {\n    level: ErrorLevel;\n    code: keyof typeof postgresqlErrorCodes;\n    message: string;\n}\n\nexport interface DataTypeError {\n    dataType: DataType;\n    value: any;\n}\n\nexport enum SSLMode {\n    Disable = 'disable',\n    Prefer = 'prefer',\n    Require = 'require',\n}\n\nexport interface SSL {\n    mode: SSLMode.Prefer | SSLMode.Require;\n    options?: ConnectionOptions;\n}\n\nexport interface Configuration\n    extends Partial<ClientConnectionDefaults & ClientConnectionOptions> {\n    user?: string;\n    database?: string;\n    host?: string;\n    port?: number;\n    password?: string;\n    types?: Map<DataType, ValueTypeReader>;\n    bigints?: boolean;\n    keepAlive?: boolean;\n    preparedStatementPrefix?: string;\n    connectionTimeout?: number;\n    ssl?: SSLMode.Disable | SSL;\n}\n\nexport interface Notification {\n    processId: number;\n    channel: string;\n    payload: string;\n}\n\nexport interface PreparedStatement<T = ResultRecord> extends AsyncDisposable {\n    close: (portal?: string) => Promise<void>;\n    execute: (\n        values?: any[],\n        portal?: string,\n        format?: DataFormat | DataFormat[],\n        streams?: Record<string, Writable>,\n    ) => ResultIterator<T>;\n}\n\ntype CloseHandler = () => void;\n\ninterface RowDataHandler {\n    callback: DataHandler;\n    streams: Record<string, Writable>;\n    bigints: boolean;\n}\n\ntype DescriptionHandler = (description: RowDescription) => void;\n\ninterface RowDataHandlerInfo {\n    readonly handler: RowDataHandler;\n    readonly description: RowDescription | null;\n}\n\n// Indicates that an error has occurred.\ntype ErrorHandler = (error: Error | DatabaseError) => void;\n\nconst enum Cleanup {\n    Bind,\n    Close,\n    ErrorHandler,\n    ParameterDescription,\n    PreFlight,\n    RowDescription,\n}\n\ninterface Bind {\n    name: string;\n    format: DataFormat | DataFormat[];\n    portal: string;\n    values: any[];\n    close: boolean;\n}\n\ninterface PreFlightQueue {\n    descriptionHandler: DescriptionHandler;\n    dataHandler: RowDataHandler | null;\n    bind: Bind | null;\n}\n\nconst DEFAULTS = new Defaults(env as Record<string, string>);\n\nexport type EventMap<\n    T = {\n        error: DatabaseError;\n        notice: ClientNotice;\n        notification: Notification;\n    },\n> = {\n    [K in keyof T]: [T[K]];\n};\n\ntype Resolve<T> = (value?: T) => void;\n\nexport type EventListener<K> = K extends keyof EventMap ? (\n    (...args: EventMap[K]) => void\n) : never;\n\nexport class ClientImpl {\n    private readonly events = new EventEmitter<EventMap>();\n\n    private connected = false;\n    private error = false;\n\n    private ending?: Resolve<NodeJS.ErrnoException>;\n    private connecting?: Resolve<Error>;\n\n    private readonly encoding: BufferEncoding;\n    private readonly writer: Writer;\n\n    private readonly clientNonce = randomBytes(18).toString('base64');\n    private serverSignature: string | null = null;\n\n    private expect = 5;\n    private stream = new Socket();\n    private mustDrain = false;\n    private activeRow: Array<any> | null = null;\n\n    private bindQueue = new Queue<RowDataHandlerInfo | null>();\n    private closeHandlerQueue = new Queue<CloseHandler | null>();\n    private cleanupQueue = new Queue<Cleanup>();\n    private errorHandlerQueue = new Queue<ErrorHandler>();\n    private preFlightQueue = new Queue<PreFlightQueue>();\n    private rowDescriptionQueue = new Queue<RowDescription>();\n    private parameterDescriptionQueue = new Queue<Array<DataType>>();\n\n    private nextPreparedStatementId = 0;\n    private activeDataHandlerInfo: RowDataHandlerInfo | null = null;\n    private readonly parameters: Map<string, string> = new Map();\n\n    public closed = true;\n    public processId: number | null = null;\n    public secretKey: number | null = null;\n    public transactionStatus: TransactionStatus | null = null;\n\n    /**\n     * @param config - An optional configuration object, comprised of connection details\n     *     and client configuration. Most of the connection details can also be specified\n     *     using environment variables, see {@link Environment}.\n     */\n    constructor(public readonly config: Configuration = {}) {\n        this.encoding =\n            config.clientEncoding ||\n            (DEFAULTS.clientEncoding as BufferEncoding) ||\n            'utf-8';\n        this.writer = new Writer(this.encoding);\n\n        this.stream.on('close', () => {\n            this.closed = true;\n            this.ending?.();\n        });\n\n        this.stream.on('connect', () => {\n            const keepAlive =\n                typeof this.config.keepAlive === 'undefined' ?\n                    this.config.keepAlive\n                :   true;\n\n            if (keepAlive) {\n                this.stream.setKeepAlive(true);\n            }\n\n            this.closed = false;\n            this.startup();\n        });\n\n        /* istanbul ignore next */\n        this.stream.on('error', (error: NodeJS.ErrnoException) => {\n            if (this.connecting) {\n                this.connecting(error);\n            } else {\n                // Don't raise ECONNRESET errors - they can & should be\n                // ignored during disconnect.\n                if (this.ending) {\n                    if (error.errno === constants.errno.ECONNRESET) return;\n                    this.ending();\n                }\n            }\n        });\n\n        this.stream.on('finish', () => {\n            this.connected = false;\n        });\n    }\n\n    private startup() {\n        const writer = new Writer(this.encoding);\n\n        if (\n            DEFAULTS.sslMode &&\n            Object.values(SSLMode).indexOf(DEFAULTS.sslMode as SSLMode) < 0\n        ) {\n            throw new Error('Invalid SSL mode: ' + DEFAULTS.sslMode);\n        }\n\n        const ssl =\n            (\n                this.config.ssl ??\n                ((DEFAULTS.sslMode as SSLMode) || SSLMode.Disable) ===\n                    SSLMode.Disable\n            ) ?\n                SSLMode.Disable\n            :   { mode: SSLMode.Prefer, options: undefined };\n\n        const settings = {\n            user: this.config.user || DEFAULTS.user,\n            database: this.config.database || DEFAULTS.database,\n            clientMinMessages: this.config.clientMinMessages,\n            defaultTableAccessMethod: this.config.defaultTableAccessMethod,\n            defaultTablespace: this.config.defaultTablespace,\n            defaultTransactionIsolation:\n                this.config.defaultTransactionIsolation,\n            extraFloatDigits: this.config.extraFloatDigits,\n            idleInTransactionSessionTimeout:\n                this.config.idleInTransactionSessionTimeout,\n            idleSessionTimeout: this.config.idleSessionTimeout,\n            lockTimeout: this.config.lockTimeout,\n            searchPath: this.config.searchPath,\n            statementTimeout: this.config.statementTimeout,\n        };\n\n        if (ssl !== SSLMode.Disable) {\n            writer.startupSSL();\n\n            const abort = (error: Error) => {\n                this.handleError(error);\n                this.connecting?.(error);\n            };\n\n            const startup = (stream?: Socket) => {\n                if (stream) this.stream = stream;\n                writer.startup(settings);\n                this.receive();\n                this.sendUsing(writer);\n            };\n\n            this.stream.once('data', (buffer: Buffer) => {\n                const code = buffer.readInt8(0);\n                switch (code) {\n                    // Server supports SSL connections, continue.\n                    case SSLResponseCode.Supported:\n                        break;\n\n                    // Server does not support SSL connections.\n                    case SSLResponseCode.NotSupported:\n                        if (ssl.mode === SSLMode.Require) {\n                            abort(\n                                new Error(\n                                    'Server does not support SSL connections',\n                                ),\n                            );\n                        } else {\n                            startup();\n                        }\n                        return;\n                    // Any other response byte, including 'E'\n                    // (ErrorResponse) indicating a server error.\n                    default:\n                        abort(\n                            new Error('Error establishing an SSL connection'),\n                        );\n                        return;\n                }\n\n                const context =\n                    ssl.options ? createSecureContext(ssl.options) : undefined;\n\n                const options = {\n                    socket: this.stream,\n                    secureContext: context,\n                    ...(ssl.options ?? {}),\n                };\n\n                const stream: TLSSocket = tls(options, () => startup(stream));\n\n                stream.on('error', (error: Error) => {\n                    abort(error);\n                });\n            });\n        } else {\n            writer.startup(settings);\n            this.receive();\n        }\n\n        this.sendUsing(writer);\n    }\n\n    private receive() {\n        let buffer: Buffer | null = null;\n        let offset = 0;\n        let remaining = 0;\n\n        this.stream.on('data', (newBuffer: Buffer) => {\n            const length = newBuffer.length;\n            const size = length + remaining;\n\n            if (buffer && remaining) {\n                const free = buffer.length - offset - remaining;\n                let tail = offset + remaining;\n                if (free < length) {\n                    const tempBuf = Buffer.allocUnsafe(size);\n                    buffer.copy(tempBuf, 0, offset, tail);\n                    offset = 0;\n                    buffer = tempBuf;\n                    tail = remaining;\n                }\n                newBuffer.copy(buffer, tail, 0, length);\n            } else {\n                buffer = newBuffer;\n                offset = 0;\n            }\n\n            try {\n                const read = this.handle(buffer, offset, size);\n                offset += read;\n                remaining = size - read;\n            } catch (error: unknown) {\n                logger.warn(error);\n                if (this.connecting) {\n                    this.connecting(error as Error);\n                } else {\n                    try {\n                        // In normal operation (including regular handling of errors),\n                        // there's nothing further to clean up at this point.\n                        while (this.handleError(error as Error)) {\n                            logger.info(\n                                'Cancelled query due to an internal error',\n                            );\n                        }\n                    } catch (error) {\n                        logger.error(\n                            'Internal error occurred while cleaning up query stack',\n                        );\n                    }\n                }\n                this.stream.destroy();\n            }\n        });\n\n        this.stream.on('drain', () => {\n            this.mustDrain = false;\n            this.writer.flush();\n            this.send();\n        });\n    }\n\n    connect(): Promise<ConnectionInfo> {\n        if (this.connecting) {\n            throw new Error('Already connecting');\n        }\n\n        if (this.error) {\n            throw new Error(\"Can't connect in error state\");\n        }\n\n        const timeout =\n            this.config.connectionTimeout ?? DEFAULTS.connectionTimeout;\n\n        let p = new Promise<ConnectionInfo>((resolve, reject) => {\n            this.connecting = (error?: Error) => {\n                this.connecting = undefined;\n                if (error) {\n                    this.stream.destroy();\n                    reject(error);\n                } else {\n                    resolve({\n                        encrypted: this.stream instanceof TLSSocket,\n                        parameters: this.parameters as ReadonlyMap<\n                            string,\n                            string\n                        >,\n                    });\n                }\n            };\n        });\n\n        const host = this.config.host ?? DEFAULTS.host;\n        const port = this.config.port ?? DEFAULTS.port;\n\n        if (host.indexOf('/') === 0) {\n            this.stream.connect(host + '/.s.PGSQL.' + port);\n        } else {\n            this.stream.connect(port, host);\n        }\n\n        if (typeof timeout !== 'undefined') {\n            p = Promise.race([\n                p,\n                new Promise((_, reject) =>\n                    setTimeout(\n                        () => reject(new Error(`Timeout after ${timeout} ms`)),\n                        timeout,\n                    ),\n                ),\n            ]) as Promise<ConnectionInfo>;\n        }\n        return p;\n    }\n\n    /** End the database connection.\n     *\n     */\n    end() {\n        if (this.ending) {\n            throw new Error('Already ending');\n        }\n\n        if (this.closed) {\n            throw new Error('Connection already closed');\n        }\n\n        if (this.stream.destroyed) {\n            throw new Error('Connection unexpectedly destroyed');\n        }\n\n        if (this.connected) {\n            this.writer.end();\n            this.send();\n            this.stream.end();\n            this.mustDrain = false;\n        } else {\n            this.stream.destroy();\n        }\n        return new Promise<void>((resolve, reject) => {\n            this.ending = (error?: NodeJS.ErrnoException) => {\n                this.ending = undefined;\n                if (!error) resolve();\n                reject(error);\n            };\n        });\n    }\n\n    on<K extends keyof EventMap>(event: K, listener: EventListener<K>): void {\n        this.events.on(event, listener);\n    }\n\n    off<K extends keyof EventMap>(event: K, listener: EventListener<K>): void {\n        this.events.off(event, listener);\n    }\n\n    /** Prepare a statement for later execution.\n     *\n     * @returns A prepared statement object.\n     */\n    prepare<T = ResultRecord>(\n        text: Query | string,\n    ): Promise<PreparedStatement<T>> {\n        const query = typeof text === 'string' ? { text } : text;\n        const providedNameOrGenerated =\n            query.name ||\n            (this.config.preparedStatementPrefix ||\n                DEFAULTS.preparedStatementPrefix) +\n                this.nextPreparedStatementId++;\n\n        return new Promise<PreparedStatement<T>>((resolve, reject) => {\n            const errorHandler: ErrorHandler = (error) => reject(error);\n            this.errorHandlerQueue.push(errorHandler);\n            this.writer.parse(\n                providedNameOrGenerated,\n                query.text,\n                query.types || [],\n            );\n            this.writer.describe(providedNameOrGenerated, 'S');\n            this.preFlightQueue.push({\n                descriptionHandler: (description: RowDescription) => {\n                    const types = this.parameterDescriptionQueue.shift();\n                    this.cleanupQueue.expect(Cleanup.ParameterDescription);\n\n                    const close = () => {\n                        return new Promise<void>((resolve) => {\n                            this.writer.close(providedNameOrGenerated, 'S');\n                            this.closeHandlerQueue.push(resolve);\n                            this.cleanupQueue.push(Cleanup.Close);\n                            this.writer.flush();\n                            this.send();\n                        });\n                    };\n\n                    resolve({\n                        [Symbol.asyncDispose]: close,\n                        close,\n                        execute: (\n                            values?: any[],\n                            portal?: string,\n                            format?: DataFormat | DataFormat[],\n                            streams?: Record<string, Writable>,\n                        ) => {\n                            const result = makeResult<T>(query?.transform);\n                            result.nameHandler(description.names);\n                            const info = {\n                                handler: {\n                                    callback: result.dataHandler,\n                                    streams: streams || {},\n                                    bigints:\n                                        query.bigints ??\n                                        this.config.bigints ??\n                                        true,\n                                },\n                                description: description,\n                            };\n                            this.bindAndExecute(\n                                info,\n                                {\n                                    name: providedNameOrGenerated,\n                                    portal: portal || query.portal || '',\n                                    format:\n                                        format ||\n                                        query.format ||\n                                        DataFormat.Binary,\n                                    values: values || [],\n                                    close: false,\n                                },\n                                types || query.types,\n                            );\n\n                            return result.iterator;\n                        },\n                    });\n                },\n                dataHandler: null,\n                bind: null,\n            });\n            this.writer.sync();\n            this.cleanupQueue.push(Cleanup.PreFlight);\n            this.cleanupQueue.push(Cleanup.ErrorHandler);\n            this.send();\n        });\n    }\n\n    /**\n     * Send a query to the database.\n     *\n     * The query string is given as the first argument, or pass a {@link Query}\n     * object which provides more control.\n     *\n     * @param text - The query string, or pass a {@link Query}\n     *     object which provides more control (including streaming values into a socket).\n     * @param values - The query parameters, corresponding to $1, $2, etc.\n     * @returns A promise for the query results.\n     */\n    query<T = ResultRecord>(\n        text: Query | string,\n        values?: any[],\n    ): ResultIterator<T> {\n        const query = typeof text === 'string' ? { text } : text;\n\n        if (this.closed && !this.connecting) {\n            throw new Error('Connection is closed.');\n        }\n\n        const format = query?.format;\n        const types = query?.types;\n        const streams = query?.streams;\n        const portal = query?.portal || '';\n        const result = makeResult<T>(query?.transform);\n\n        const descriptionHandler = (description: RowDescription) => {\n            result.nameHandler(description.names);\n        };\n\n        const dataHandler: RowDataHandler = {\n            callback: result.dataHandler,\n            streams: streams || {},\n            bigints: query.bigints ?? this.config.bigints ?? true,\n        };\n\n        if (values && values.length) {\n            const name =\n                query?.name ||\n                (this.config.preparedStatementPrefix ||\n                    DEFAULTS.preparedStatementPrefix) +\n                    this.nextPreparedStatementId++;\n\n            this.writer.parse(name, query.text, types || []);\n            this.writer.describe(name, 'S');\n            this.preFlightQueue.push({\n                descriptionHandler: descriptionHandler,\n                dataHandler: dataHandler,\n                bind: {\n                    name: name,\n                    portal: portal,\n                    format: format || DataFormat.Binary,\n                    values: values,\n                    close: true,\n                },\n            });\n            this.cleanupQueue.push(Cleanup.PreFlight);\n        } else {\n            const name = query.name || '';\n            this.writer.parse(name, query.text);\n            this.writer.bind(name, portal);\n            this.bindQueue.push(null);\n            this.writer.describe(portal, 'P');\n            this.preFlightQueue.push({\n                descriptionHandler: descriptionHandler,\n                dataHandler: dataHandler,\n                bind: null,\n            });\n            this.writer.execute(portal);\n            this.writer.close(name, 'S');\n            this.cleanupQueue.push(Cleanup.Bind);\n            this.cleanupQueue.push(Cleanup.PreFlight);\n            this.closeHandlerQueue.push(null);\n            this.cleanupQueue.push(Cleanup.Close);\n        }\n\n        const stack = new Error().stack;\n        this.errorHandlerQueue.push((error) => {\n            if (stack !== undefined)\n                error.stack = stack.replace(\n                    /(?<=^Error: )\\n/,\n                    error.toString() + '\\n',\n                );\n            result.dataHandler(error);\n        });\n\n        this.cleanupQueue.push(Cleanup.ErrorHandler);\n\n        this.writer.sync();\n        this.send();\n        return result.iterator;\n    }\n\n    private bindAndExecute(\n        info: RowDataHandlerInfo,\n        bind: Bind,\n        types: DataType[],\n    ) {\n        try {\n            this.writer.bind(\n                bind.name,\n                bind.portal,\n                bind.format,\n                bind.values,\n                types,\n            );\n        } catch (error) {\n            info.handler.callback(error as Error);\n            return;\n        }\n\n        this.bindQueue.push(info);\n        this.writer.execute(bind.portal);\n        this.cleanupQueue.push(Cleanup.Bind);\n\n        if (bind.close) {\n            this.writer.close(bind.name, 'S');\n            this.closeHandlerQueue.push(null);\n            this.cleanupQueue.push(Cleanup.Close);\n        }\n\n        this.writer.sync();\n        this.errorHandlerQueue.push((error) => {\n            info.handler.callback(error);\n        });\n        this.cleanupQueue.push(Cleanup.ErrorHandler);\n        this.send();\n    }\n\n    private handleError(error: Error): boolean {\n        while (true) {\n            switch (this.cleanupQueue.shiftMaybe()) {\n                case undefined:\n                    return false;\n                case Cleanup.Bind: {\n                    this.bindQueue.shift();\n                    break;\n                }\n                case Cleanup.Close: {\n                    this.closeHandlerQueue.shift();\n                    break;\n                }\n                case Cleanup.ErrorHandler: {\n                    const handler = this.errorHandlerQueue.shift();\n                    handler(error);\n                    this.error = true;\n                    return true;\n                }\n                case Cleanup.ParameterDescription: {\n                    // This does not seem to ever happen!\n                    this.parameterDescriptionQueue.shift();\n                    break;\n                }\n                case Cleanup.PreFlight: {\n                    this.preFlightQueue.shift();\n                    break;\n                }\n                case Cleanup.RowDescription: {\n                    this.rowDescriptionQueue.shift();\n                    break;\n                }\n            }\n        }\n    }\n\n    [Symbol.asyncDispose]() {\n        return this.end();\n    }\n\n    private send() {\n        if (this.mustDrain || !this.connected) return;\n        this.sendUsing(this.writer);\n    }\n\n    private sendUsing(writer: Writer) {\n        if (this.ending) return;\n        if (!this.stream.writable) throw new Error('Stream not writable');\n        const full = writer.send(this.stream);\n        if (full !== undefined) {\n            this.mustDrain = !full;\n        }\n    }\n\n    private parseError(buffer: Buffer) {\n        let level: DatabaseError['level'] | null = null;\n        let code: DatabaseError['code'] | null = null;\n        let message: DatabaseError['message'] | null = null;\n        let details: string | null = null;\n\n        const length = buffer.length;\n        let offset = 0;\n\n        while (offset < length) {\n            const next = buffer.indexOf(0, offset);\n            if (next < 0) break;\n\n            const value = buffer.subarray(offset + 1, next).toString();\n            switch (buffer[offset]) {\n                case 0x53: {\n                    if (level === null) {\n                        level = value as DatabaseError['level'];\n                    }\n                    break;\n                }\n                case 0x56: {\n                    level = value as DatabaseError['level'];\n                    break;\n                }\n                case 0x43: {\n                    code = value as DatabaseError['code'];\n                    break;\n                }\n                case 0x44: {\n                    details = value;\n                    break;\n                }\n                case 0x4d: {\n                    message = value;\n                    break;\n                }\n                default:\n                    break;\n            }\n\n            offset = next + 1;\n        }\n\n        if (level && code && message) {\n            return new DatabaseError(\n                level,\n                code,\n                details ? `${message}: ${details}` : message,\n            );\n        }\n\n        throw new Error('Unable to parse error message.');\n    }\n\n    private handle(buffer: Buffer, offset: number, size: number): number {\n        let read = 0;\n\n        while (size >= this.expect + read) {\n            let frame = offset + read;\n            let mtype: Message = buffer.readInt8(frame);\n\n            // Fast path: retrieve data rows.\n            if (mtype === Message.RowData) {\n                const info = this.activeDataHandlerInfo;\n\n                if (!info) {\n                    throw new Error('No active data handler');\n                }\n\n                if (!info.description) {\n                    throw new Error('No result type information');\n                }\n\n                const {\n                    handler: { callback, streams, bigints },\n                    description: { columns, names },\n                } = info;\n\n                let row = this.activeRow;\n\n                const types = this.config.types;\n                const encoding = this.encoding;\n\n                const hasStreams = Object.keys(streams).length > 0;\n                const mappedStreams =\n                    hasStreams ? names.map((name) => streams[name]) : undefined;\n\n                while (true) {\n                    mtype = buffer.readInt8(frame);\n                    if (mtype !== Message.RowData) break;\n\n                    const bytes = buffer.readInt32BE(frame + 1) + 1;\n                    const start = frame + 5;\n\n                    if (size < 11 + read) {\n                        this.expect = 7;\n                        this.activeRow = row;\n                        return read;\n                    }\n\n                    if (row === null) {\n                        const count = buffer.readInt16BE(start);\n                        row = new Array<any>(count);\n                    }\n\n                    const startRowData = start + 2;\n                    const reader = new Reader(\n                        buffer,\n                        startRowData,\n                        bytes + read,\n                    );\n                    const end = reader.readRowData(\n                        row,\n                        columns,\n                        encoding,\n                        bigints,\n                        types,\n                        mappedStreams,\n                    );\n\n                    const remaining = bytes + read - size;\n                    if (remaining <= 0) {\n                        callback(row);\n                        row = null;\n                    } else {\n                        const offset = startRowData + end;\n                        buffer.writeInt8(mtype, offset - 7);\n                        buffer.writeInt32BE(bytes - end - 1, offset - 6);\n                        buffer.writeInt16BE(row.length, offset - 2);\n                        this.expect = 12;\n                        this.activeRow = row;\n                        return read + end;\n                    }\n\n                    // Keep track of how much data we've consumed.\n                    frame += bytes;\n\n                    // If the next message header doesn't fit, we\n                    // break out and wait for more data to arrive.\n                    if (size < frame + 5) {\n                        this.activeRow = row;\n                        this.expect = 5;\n                        return read;\n                    }\n\n                    read += bytes;\n                }\n\n                this.activeRow = null;\n            }\n\n            const bytes = buffer.readInt32BE(frame + 1) + 1;\n            const length = bytes - 5;\n\n            if (size < bytes + read) {\n                this.expect = bytes;\n                break;\n            }\n\n            this.expect = 5;\n            read += bytes;\n\n            // This is the start offset of the message data.\n            const start = frame + 5;\n\n            switch (mtype as Message) {\n                case Message.Authentication: {\n                    const writer = new Writer(this.encoding);\n                    const code = buffer.readInt32BE(start);\n                    /* istanbul ignore next */\n                    outer: switch (code) {\n                        case 0: {\n                            nextTick(() => {\n                                this.connecting?.();\n                            });\n                            break;\n                        }\n                        case 3: {\n                            const s =\n                                this.config.password || DEFAULTS.password || '';\n                            writer.password(s);\n                            break;\n                        }\n                        case 5: {\n                            const { user = '', password = '' } = this.config;\n                            const salt = buffer.subarray(start + 4, start + 8);\n                            const shadow = md5(\n                                `${password || DEFAULTS.password}` +\n                                    `${user || DEFAULTS.user}`,\n                            );\n                            writer.password(`md5${md5(shadow, salt)}`);\n                            break;\n                        }\n                        case 10: {\n                            const reader = new Reader(buffer, start + 4);\n                            const mechanisms: string[] = [];\n                            while (true) {\n                                const mechanism = reader.readCString(\n                                    this.encoding,\n                                );\n                                if (mechanism.length === 0) break;\n                                if (\n                                    writer.saslInitialResponse(\n                                        mechanism,\n                                        this.clientNonce,\n                                    )\n                                )\n                                    break outer;\n                                mechanisms.push(mechanism);\n                            }\n                            throw new Error(\n                                `SASL authentication unsupported (mechanisms: ${mechanisms.join(', ')})`,\n                            );\n                        }\n                        case 11: {\n                            const data = buffer\n                                .subarray(start + 4, start + length)\n                                .toString('utf8');\n                            const password =\n                                this.config.password || DEFAULTS.password || '';\n                            this.serverSignature = writer.saslResponse(\n                                data,\n                                password,\n                                this.clientNonce,\n                            );\n                            break;\n                        }\n                        case 12: {\n                            const data = buffer\n                                .subarray(start + 4, start + length)\n                                .toString('utf8');\n                            if (!this.serverSignature)\n                                throw new Error('Server signature missing');\n                            writer.saslFinal(data, this.serverSignature);\n                            break;\n                        }\n                        default:\n                            throw new Error(\n                                `Unsupported authentication scheme: ${code}`,\n                            );\n                    }\n                    this.sendUsing(writer);\n                    break;\n                }\n                case Message.BackendKeyData: {\n                    this.processId = buffer.readInt32BE(start);\n                    this.secretKey = buffer.readInt32BE(start + 4);\n                    break;\n                }\n                case Message.BindComplete: {\n                    const info = this.bindQueue.shift();\n                    this.cleanupQueue.expect(Cleanup.Bind);\n                    if (info) {\n                        this.activeDataHandlerInfo = info;\n                    }\n                    break;\n                }\n                case Message.NoData: {\n                    const preflight = this.preFlightQueue.shift();\n                    if (preflight.dataHandler) {\n                        const info = {\n                            handler: preflight.dataHandler,\n                            description: null,\n                        };\n                        if (preflight.bind) {\n                            this.cleanupQueue.expect(\n                                Cleanup.ParameterDescription,\n                            );\n                            this.bindAndExecute(\n                                info,\n                                preflight.bind,\n                                this.parameterDescriptionQueue.shift(),\n                            );\n                        } else {\n                            this.activeDataHandlerInfo = info;\n                        }\n                    } else {\n                        preflight.descriptionHandler({\n                            columns: new Uint32Array(0),\n                            names: [],\n                        });\n                    }\n                    this.cleanupQueue.expect(Cleanup.PreFlight);\n                    break;\n                }\n                case Message.EmptyQueryResponse:\n                case Message.CommandComplete: {\n                    const info = this.activeDataHandlerInfo;\n                    if (info) {\n                        const status = buffer\n                            .subarray(start, start + length - 1)\n                            .toString();\n\n                        info.handler.callback(status || null);\n                        this.activeDataHandlerInfo = null;\n                    }\n                    break;\n                }\n                case Message.CloseComplete: {\n                    const handler = this.closeHandlerQueue.shift();\n                    this.cleanupQueue.expect(Cleanup.Close);\n                    if (handler) {\n                        handler();\n                    }\n                    break;\n                }\n                case Message.ErrorResponse: {\n                    const error = this.parseError(\n                        buffer.subarray(start, start + length),\n                    );\n\n                    if (this.connecting) throw error;\n\n                    try {\n                        this.events.emit('error', error);\n                    } catch {\n                        // If there are no subscribers for the event, an error\n                        // is raised. We're not interesting in this behavior.\n                    }\n\n                    if (!this.handleError(error)) {\n                        throw new Error(\n                            'An error occurred without an active query',\n                        );\n                    }\n                    break;\n                }\n                case Message.Notice: {\n                    const notice = this.parseError(\n                        buffer.subarray(start, start + length),\n                    );\n                    this.events.emit('notice', notice);\n                    break;\n                }\n                case Message.NotificationResponse: {\n                    const reader = new Reader(buffer, start);\n                    const processId = reader.readInt32BE();\n                    const channel = reader.readCString(this.encoding);\n                    const payload = reader.readCString(this.encoding);\n                    this.events.emit('notification', {\n                        processId: processId,\n                        channel: channel,\n                        payload: payload,\n                    });\n                    break;\n                }\n                case Message.ParseComplete: {\n                    break;\n                }\n                case Message.ParameterDescription: {\n                    const length = buffer.readInt16BE(start);\n                    const types: Array<DataType> = new Array(length);\n                    for (let i = 0; i < length; i++) {\n                        const offset = start + 2 + i * 4;\n                        const dataType = buffer.readInt32BE(offset);\n                        types[i] = dataType;\n                    }\n                    this.cleanupQueue.unshift(Cleanup.ParameterDescription);\n                    this.parameterDescriptionQueue.push(types);\n                    break;\n                }\n                case Message.ParameterStatus: {\n                    const reader = new Reader(buffer, start);\n                    const name = reader.readCString(this.encoding);\n                    const value = reader.readCString(this.encoding);\n                    this.parameters.set(name, value);\n                    break;\n                }\n                case Message.ReadyForQuery: {\n                    if (this.error) {\n                        this.error = false;\n                    } else if (this.connected) {\n                        this.errorHandlerQueue.shift();\n                        this.cleanupQueue.expect(Cleanup.ErrorHandler);\n                    } else {\n                        this.connected = true;\n                    }\n                    const status = buffer.readInt8(start);\n                    this.transactionStatus = status as TransactionStatus;\n                    this.send();\n                    break;\n                }\n                case Message.RowDescription: {\n                    const preflight = this.preFlightQueue.shift();\n                    const reader = new Reader(buffer, start);\n                    const description = reader.readRowDescription(\n                        this.config.types,\n                    );\n\n                    preflight.descriptionHandler(description);\n\n                    if (preflight.dataHandler) {\n                        const info = {\n                            handler: preflight.dataHandler,\n                            description: description,\n                        };\n\n                        if (preflight.bind) {\n                            this.cleanupQueue.expect(\n                                Cleanup.ParameterDescription,\n                            );\n                            this.bindAndExecute(\n                                info,\n                                preflight.bind,\n                                this.parameterDescriptionQueue.shift(),\n                            );\n                        } else {\n                            this.activeDataHandlerInfo = info;\n                        }\n                    }\n\n                    this.cleanupQueue.expect(Cleanup.PreFlight);\n                    break;\n                }\n                default: {\n                    logger.warn(`Message not implemented: ${mtype}`);\n                    break;\n                }\n            }\n        }\n\n        return read;\n    }\n}\n"]}