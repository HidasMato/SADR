{"version":3,"file":"buffer.js","sourceRoot":"","sources":["../../src/buffer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC,MAAM,YAAY,GAAG,IAAI,CAAC;AAE1B,MAAM,OAAO,aAAa;IAA1B;QACY,WAAM,GAAG,CAAC,CAAC;QAEX,SAAI,GAAG,YAAY,CAAC;IAkDhC,CAAC;IAhDG,KAAK;QACD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACpB,CAAC;IAED,IAAI,KAAK;QACL,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,IAAY;QAChB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC;QACtC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,MAAM,SAAS,GAAG,MAAM,GAAG,MAAM,CAAC;QAElC,IAAI,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAClC,OAAO,SAAS,GAAG,MAAM,GAAG,IAAI;gBAC5B,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;YAC/C,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;aAC1C;YACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,SAAS,CAAC,IAAY;QAClB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;QACpB,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,OAAO;QACH,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACrD,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;SACxD;QACD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QACxB,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,MAAc;QAChB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACxB;IACL,CAAC;CACJ","sourcesContent":["import { Buffer } from 'node:buffer';\n\nconst INITIAL_SIZE = 4096;\n\nexport class ElasticBuffer {\n    private offset = 0;\n    private buffer?: Buffer;\n    private size = INITIAL_SIZE;\n\n    clear() {\n        this.offset = 0;\n    }\n\n    get empty() {\n        return this.offset === 0;\n    }\n\n    reserve(size: number) {\n        let length = this.buffer?.length || 0;\n        const offset = this.offset;\n        const available = length - offset;\n\n        if (available < size || !this.buffer) {\n            while (available + length < size)\n                length = Math.max(this.size, length << 1);\n            const buffer = Buffer.allocUnsafe(length << 1);\n            if (this.buffer) {\n                this.buffer.copy(buffer, 0, 0, offset);\n            }\n            this.buffer = buffer;\n            return buffer;\n        }\n        return this.buffer;\n    }\n\n    getBuffer(size: number) {\n        const offset = this.offset;\n        const buffer = this.reserve(size);\n        this.offset += size;\n        return buffer.subarray(offset, offset + size);\n    }\n\n    consume() {\n        const buffer = this.buffer?.subarray(0, this.offset);\n        if (buffer) {\n            this.size = Math.max(this.offset, INITIAL_SIZE) >> 1;\n        }\n        this.offset = 0;\n        this.buffer = undefined;\n        return buffer;\n    }\n\n    offer(buffer: Buffer) {\n        if (!this.buffer) {\n            this.buffer = buffer;\n        }\n    }\n}\n"]}