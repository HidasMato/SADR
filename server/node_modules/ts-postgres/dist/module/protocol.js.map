{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../../src/protocol.ts"],"names":[],"mappings":"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","sourcesContent":["import { Buffer } from 'node:buffer';\nimport { Socket } from 'node:net';\nimport { Writable } from 'node:stream';\nimport { ElasticBuffer } from './buffer.js';\nimport { postgresqlErrorCodes } from './errors.js';\nimport { sign } from './sasl.js';\nimport { sum } from './utils.js';\nimport {\n    arrayDataTypeMapping,\n    isPoint,\n    BufferEncoding,\n    DataFormat,\n    DataType,\n    ValueTypeReader,\n} from './types.js';\n\nconst arrayMask = 1 << 31;\nconst readerMask = 1 << 29;\nconst infinity = Number('Infinity');\nconst timeshift = 946684800000;\nconst isUndefined = Object.is.bind(null, undefined);\n\nexport const enum Command {\n    Bind = 0x42,\n    Close = 0x43,\n    Describe = 0x44,\n    End = 0x58,\n    Execute = 0x45,\n    Flush = 0x48,\n    Parse = 0x50,\n    Password = 0x70,\n    Query = 0x51,\n    Sync = 0x53,\n}\n\nexport const enum SASL {\n    SASLResponse = 0x70,\n}\n\nexport const enum ErrorLevel {\n    Debug1 = 'DEBUG1',\n    Debug2 = 'DEBUG2',\n    Debug3 = 'DEBUG3',\n    Debug4 = 'DEBUG4',\n    Debug5 = 'DEBUG5',\n    Error = 'ERROR',\n    Fatal = 'FATAL',\n    Log = 'LOG',\n    Notice = 'NOTICE',\n    Panic = 'PANIC',\n}\n\nexport const enum Message {\n    Authentication = 0x52,\n    BackendKeyData = 0x4b,\n    BindComplete = 0x32,\n    CloseComplete = 0x33,\n    CommandComplete = 0x43,\n    EmptyQueryResponse = 0x49,\n    ErrorResponse = 0x45,\n    NoData = 0x6e,\n    Notice = 0x4e,\n    NotificationResponse = 0x41,\n    ParseComplete = 0x31,\n    ParameterDescription = 0x74,\n    ParameterStatus = 0x53,\n    ReadyForQuery = 0x5a,\n    RowData = 0x44,\n    RowDescription = 0x54,\n}\n\nexport const enum SSLResponseCode {\n    Supported = 0x53,\n    NotSupported = 0x4e,\n}\n\nexport const enum TransactionStatus {\n    Idle = 0x49,\n    InTransaction = 0x54,\n    InError = 0x45,\n}\n\nexport type SegmentValue = Buffer | bigint | number | null | string;\nexport type Segment = [SegmentType, SegmentValue];\n\nexport const enum SegmentType {\n    Buffer,\n    Float4,\n    Float8,\n    Int8,\n    Int16BE,\n    Int32BE,\n    Int64BE,\n    UInt32BE,\n}\n\nexport interface RowDescription {\n    columns: Uint32Array;\n    names: string[];\n}\n\n// See https://www.postgresql.org/docs/current/runtime-config-client.html for\n// details on client connection options (required) and defaults below.\nexport interface ClientConnectionOptions {\n    user: string;\n    clientEncoding: BufferEncoding;\n}\n\nexport interface ClientConnectionDefaults {\n    database: string;\n    clientMinMessages: Uppercase<keyof typeof ErrorLevel>;\n    defaultTableAccessMethod: string;\n    defaultTablespace: string;\n    defaultTransactionIsolation: string;\n    extraFloatDigits: number;\n    idleInTransactionSessionTimeout: number;\n    idleSessionTimeout: number;\n    lockTimeout: number;\n    searchPath: string;\n    statementTimeout: number;\n}\n\nexport type StartupConfiguration = Omit<\n    ClientConnectionOptions,\n    'clientEncoding'\n> &\n    Partial<ClientConnectionDefaults>;\n\nexport class DatabaseError extends Error {\n    constructor(\n        public level: ErrorLevel,\n        public code: keyof typeof postgresqlErrorCodes,\n        public message: string,\n    ) {\n        super(message);\n        const actualProto = new.target.prototype;\n\n        if (Object.setPrototypeOf) {\n            Object.setPrototypeOf(this, actualProto);\n        } else {\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            (this as any).__proto__ = actualProto;\n        }\n    }\n}\n\nexport type Receive = (buffer: Buffer, offset: number, size: number) => number;\n\nconst nullBuffer = Buffer.from('null');\n\nfunction dateToStringUTC(date: Date, includeTime: boolean) {\n    const pad = (n: number, length: number) =>\n        n.toString().padStart(length, '0');\n\n    const year = date.getUTCFullYear();\n    const isBC = year < 0;\n\n    let result =\n        pad(isBC ? 1 - year : year, 4) +\n        '-' +\n        pad(date.getUTCMonth() + 1, 2) +\n        '-' +\n        pad(date.getUTCDate(), 2);\n\n    if (includeTime) {\n        result +=\n            'T' +\n            pad(date.getUTCHours(), 2) +\n            ':' +\n            pad(date.getUTCMinutes(), 2) +\n            ':' +\n            pad(date.getUTCSeconds(), 2) +\n            '.' +\n            pad(date.getUTCMilliseconds(), 3) +\n            '+00:00';\n    }\n\n    if (isBC) {\n        result += ' BC';\n    }\n\n    return result;\n}\n\nfunction formatUuid(bytes: Buffer) {\n    const slice = (start: number, end: number) => {\n        return bytes.subarray(start, end).toString('hex');\n    };\n\n    return [\n        slice(0, 4),\n        slice(4, 6),\n        slice(6, 8),\n        slice(8, 10),\n        slice(10, 16),\n    ].join('-');\n}\n\nfunction parseUuid(uuid: string) {\n    return Buffer.from(uuid.replace(/-/g, ''), 'hex');\n}\n\nfunction makeBuffer(\n    s: string,\n    encoding?: BufferEncoding,\n    nullTerminate = false,\n): SegmentValue {\n    return Buffer.from(nullTerminate ? s + '\\0' : s, encoding);\n}\n\nfunction makeBufferSegment(\n    s: string,\n    encoding?: BufferEncoding,\n    nullTerminate = false,\n): Segment {\n    return [SegmentType.Buffer, makeBuffer(s, encoding, nullTerminate)];\n}\n\nfunction getSegmentSize(segment: SegmentType, value: SegmentValue) {\n    switch (segment) {\n        case SegmentType.Buffer: {\n            if (value instanceof Buffer) {\n                return value.length;\n            } else {\n                break;\n            }\n        }\n        case SegmentType.Int64BE:\n        case SegmentType.Float8: {\n            return 8;\n        }\n        case SegmentType.Int8: {\n            return 1;\n        }\n        case SegmentType.Int16BE: {\n            return 2;\n        }\n        case SegmentType.Float4:\n        case SegmentType.Int32BE:\n        case SegmentType.UInt32BE: {\n            return 4;\n        }\n    }\n    return -1;\n}\n\nfunction getMessageSize(code: number | null, segments: Segment[]) {\n    // Messages are composed of a one byte message code plus a\n    // 32-bit message length.\n    let size = 4 + (code ? 1 : 0);\n\n    // Precompute total message size.\n    const length = segments.length;\n    for (let i = 0; i < length; i++) {\n        const [segment, value] = segments[i];\n        size += Math.max(getSegmentSize(segment, value), 0);\n    }\n\n    return size;\n}\n\nexport function readRowDescription(\n    buffer: Buffer,\n    start: number,\n    types?: ReadonlyMap<DataType, ValueTypeReader>,\n) {\n    let offset = start;\n    const length = buffer.readInt16BE(offset);\n    const columns = new Uint32Array(length);\n    const names = new Array<string>(length);\n    offset += 2;\n    let i = 0;\n\n    while (i < length) {\n        const j = buffer.indexOf('\\0', offset);\n        const name = buffer.subarray(offset, j).toString();\n        const dataType = buffer.readInt32BE(j + 7);\n        const innerDataType = arrayDataTypeMapping.get(dataType);\n        const isArray = typeof innerDataType !== 'undefined';\n        const typeReader = types ? types.get(dataType) : undefined;\n\n        columns[i] =\n            (innerDataType || dataType) |\n            (isArray ? arrayMask : 0) |\n            (typeReader ? readerMask : 0);\n\n        names[i] = name;\n\n        i++;\n        offset = j + 19;\n    }\n\n    return {\n        columns: columns,\n        names: names,\n    };\n}\n\nexport function readRowData(\n    buffer: Buffer,\n    row: Array<any>,\n    columnSpecification: Uint32Array,\n    encoding: BufferEncoding,\n    bigints: boolean,\n    types?: ReadonlyMap<DataType, ValueTypeReader>,\n    streams?: ReadonlyArray<Writable | null>,\n): number {\n    const columns = row.length;\n    const bufferLength = buffer.length;\n\n    // Find the row index (i.e., column) that's undefined which is\n    // where we start reading row data.\n    let i = row.findIndex(isUndefined);\n    let offset = 0;\n\n    while (i < columns) {\n        // Must have enough data available to read column size.\n        const start = offset + 4;\n        if (bufferLength < start) break;\n\n        const j = i;\n        i++;\n\n        const length = buffer.readInt32BE(offset);\n\n        // If the length is reported as -1, this means a NULL value.\n        const dataLength = length >= 0 ? length : 0;\n\n        const end = start + dataLength;\n        const remaining = end - bufferLength;\n        const partial = remaining > 0;\n\n        let value: any = null;\n\n        if (start < end) {\n            const spec = columnSpecification[j];\n            let skip = false;\n\n            if (streams && spec === DataType.Bytea) {\n                const stream = streams[j];\n                if (stream) {\n                    const slice = buffer.subarray(start, end);\n                    const alloc = Buffer.allocUnsafe(slice.length);\n                    slice.copy(alloc, 0, 0, slice.length);\n                    stream.write(alloc);\n                    buffer.writeInt32BE(\n                        length - alloc.length,\n                        bufferLength - 4,\n                    );\n\n                    if (partial) {\n                        return bufferLength - 4;\n                    }\n\n                    skip = true;\n                }\n            }\n\n            if (partial) {\n                break;\n            }\n\n            if (!skip) {\n                const dataType: DataType = spec & ~arrayMask & ~readerMask;\n\n                const isArray = (spec & arrayMask) !== 0;\n                const isReader = (spec & readerMask) !== 0;\n\n                if (isReader) {\n                    const reader = types?.get(dataType);\n                    if (reader) {\n                        value = reader(\n                            buffer,\n                            start,\n                            end,\n                            DataFormat.Binary,\n                            encoding,\n                        );\n                    }\n                } else {\n                    const read = (t: DataType, start: number, end: number) => {\n                        if (start === end) return null;\n\n                        /* Cutoff for system object OIDs;\n                           see comments in src/include/access/transam.h\n\n                           We do not support user object OIDs.\n                        */\n                        if (t >= DataType.MinUserOid) return null;\n\n                        switch (t) {\n                            case DataType.Bool:\n                                return buffer[start] !== 0;\n                            case DataType.Date: {\n                                const n = buffer.readInt32BE(start);\n                                if (n === 0x7fffffff) return infinity;\n                                if (n === -0x80000000) return -infinity;\n\n                                // Shift from 2000 to 1970 and fix units.\n                                return new Date(n * 1000 * 86400 + timeshift);\n                            }\n                            case DataType.Timestamp:\n                            case DataType.Timestamptz: {\n                                const lo = buffer.readUInt32BE(start + 4);\n                                const hi = buffer.readInt32BE(start);\n\n                                if (lo === 0xffffffff && hi === 0x7fffffff)\n                                    return infinity;\n                                if (lo === 0x00000000 && hi === -0x80000000)\n                                    return -infinity;\n\n                                return new Date(\n                                    (lo + hi * 4294967296) / 1000 + timeshift,\n                                );\n                            }\n                            case DataType.Int2:\n                                return buffer.readInt16BE(start);\n                            case DataType.Int4:\n                            case DataType.Oid:\n                                return buffer.readInt32BE(start);\n                            case DataType.Int8: {\n                                const value = buffer.readBigInt64BE(start);\n                                if (bigints) return value;\n                                if (value > Number.MAX_SAFE_INTEGER) {\n                                    throw new Error(\n                                        \"INT8 value too big for 'number' type\",\n                                    );\n                                }\n                                return Number(value);\n                            }\n                            case DataType.Float4:\n                                return buffer.readFloatBE(start);\n                            case DataType.Float8:\n                                return buffer.readDoubleBE(start);\n                            case DataType.Bpchar:\n                            case DataType.Char:\n                            case DataType.Name:\n                            case DataType.Text:\n                            case DataType.Varchar:\n                                return buffer.toString(encoding, start, end);\n                            case DataType.Bytea:\n                                const new_buffer = Buffer.allocUnsafe(\n                                    end - start,\n                                );\n                                buffer.copy(new_buffer, 0, start, end);\n                                return new_buffer;\n                            case DataType.Jsonb:\n                                if (buffer[start] === 1) {\n                                    const jsonb = buffer.toString(\n                                        encoding,\n                                        start + 1,\n                                        end,\n                                    );\n\n                                    if (jsonb) {\n                                        return JSON.parse(jsonb);\n                                    }\n                                }\n\n                                break;\n                            case DataType.Json:\n                                const json = buffer.toString(\n                                    encoding,\n                                    start,\n                                    end,\n                                );\n                                if (json) {\n                                    return JSON.parse(json);\n                                }\n                                break;\n                            case DataType.Point:\n                                return {\n                                    x: buffer.readDoubleBE(start),\n                                    y: buffer.readDoubleBE(start + 8),\n                                };\n                            case DataType.Uuid:\n                                return formatUuid(buffer.subarray(start, end));\n                        }\n                        return null;\n                    };\n\n                    if (isArray) {\n                        let offset = start;\n\n                        const readArray = (size: number) => {\n                            const array: any[] = new Array(size);\n\n                            for (let j = 0; j < size; j++) {\n                                const length = buffer.readInt32BE(offset);\n                                offset += 4;\n                                let value = null;\n                                if (length >= 0) {\n                                    const elementStart = offset;\n                                    offset = elementStart + length;\n                                    value = read(\n                                        elementType,\n                                        elementStart,\n                                        offset,\n                                    );\n                                }\n                                array[j] = value;\n                            }\n                            return array;\n                        };\n\n                        const dimCount = buffer.readInt32BE(offset) - 1;\n                        const elementType = buffer.readInt32BE((offset += 8));\n\n                        offset += 4;\n\n                        if (dimCount === 0) {\n                            const size = buffer.readInt32BE(offset);\n                            offset += 8;\n                            value = readArray(size);\n                        } else {\n                            const arrays: any[][] = new Array(dimCount);\n                            const dims = new Uint32Array(dimCount);\n\n                            for (let j = 0; j < dimCount; j++) {\n                                const size = buffer.readInt32BE(offset);\n                                dims[j] = size;\n                                offset += 8;\n                            }\n\n                            const size = buffer.readInt32BE(offset);\n                            const counts = Uint32Array.from(dims);\n                            const total = dims.reduce((a, b) => a * b);\n\n                            offset += 8;\n\n                            for (let l = 0; l < total; l++) {\n                                let next = readArray(size);\n                                for (let j = dimCount - 1; j >= 0; j--) {\n                                    const count = counts[j];\n                                    const dim = dims[j];\n                                    const k = dim - count;\n                                    const m = count - 1;\n\n                                    if (k === 0) {\n                                        arrays[j] = new Array(dim);\n                                    }\n\n                                    const array = arrays[j];\n\n                                    array[k] = next;\n                                    counts[j] = m || dims[j];\n\n                                    if (m !== 0) break;\n                                    next = array;\n                                }\n                            }\n\n                            value = arrays[0];\n                        }\n                    } else {\n                        value = read(dataType, start, end);\n                    }\n                }\n            }\n        }\n\n        row[j] = value;\n        offset = end;\n    }\n\n    return offset;\n}\n\nexport function writeMessage(code: number | null, segments: Segment[]) {\n    const size = getMessageSize(code, segments);\n    const buffer = Buffer.allocUnsafe(size);\n    writeMessageInto(code, segments, buffer);\n    return buffer;\n}\n\nfunction writeMessageInto(\n    code: number | null,\n    segments: Segment[],\n    buffer: Buffer,\n) {\n    let offset = 0;\n    if (code) buffer[offset++] = code;\n    buffer.writeInt32BE(buffer.length - (code ? 1 : 0), offset);\n    offset += 4;\n    const length = segments.length;\n    for (let i = 0; i < length; i++) {\n        const [segment, value] = segments[i];\n        switch (segment) {\n            case SegmentType.Buffer: {\n                if (value instanceof Buffer) {\n                    value.copy(buffer, offset);\n                    offset += value.length;\n                }\n                break;\n            }\n            case SegmentType.Float4: {\n                const n = Number(value);\n                buffer.writeFloatBE(n, offset);\n                offset += 4;\n                break;\n            }\n            case SegmentType.Float8: {\n                const n = Number(value);\n                buffer.writeDoubleBE(n, offset);\n                offset += 8;\n                break;\n            }\n            case SegmentType.Int8: {\n                const n = Number(value);\n                buffer.writeInt8(n, offset);\n                offset += 1;\n                break;\n            }\n            case SegmentType.Int16BE: {\n                const n = Number(value);\n                buffer.writeInt16BE(n, offset);\n                offset += 2;\n                break;\n            }\n            case SegmentType.Int32BE: {\n                const n = Number(value);\n                buffer.writeInt32BE(n, offset);\n                offset += 4;\n                break;\n            }\n            case SegmentType.Int64BE: {\n                const n =\n                    value instanceof Buffer ? value.readBigInt64BE(0)\n                    : typeof value === 'bigint' ? value\n                    : BigInt(Number(value));\n                buffer.writeBigInt64BE(n, offset);\n                offset += 8;\n                break;\n            }\n            case SegmentType.UInt32BE: {\n                const n = Number(value);\n                buffer.writeUInt32BE(n, offset);\n                offset += 4;\n                break;\n            }\n        }\n    }\n}\n\nexport class Reader {\n    constructor(\n        private readonly buffer: Buffer,\n        private start: number,\n        private end?: number,\n    ) {}\n\n    readInt32BE() {\n        const n = this.buffer.readInt32BE(this.start);\n        this.start += 4;\n        return n;\n    }\n\n    readCString(encoding: BufferEncoding) {\n        const start = this.start;\n        const i = this.buffer.indexOf(0, start);\n        const s = this.buffer.toString(encoding, start, i);\n        this.start = i + 1;\n        return s;\n    }\n\n    readRowData(\n        row: any[],\n        columnSpecification: Uint32Array,\n        encoding: BufferEncoding,\n        bigints: boolean,\n        types?: ReadonlyMap<DataType, ValueTypeReader>,\n        streams?: ReadonlyArray<Writable | null>,\n    ) {\n        return readRowData(\n            this.buffer.subarray(this.start, this.end),\n            row,\n            columnSpecification,\n            encoding,\n            bigints,\n            types,\n            streams,\n        );\n    }\n\n    readRowDescription(types?: ReadonlyMap<DataType, ValueTypeReader>) {\n        return readRowDescription(this.buffer, this.start, types);\n    }\n}\n\nexport class Writer {\n    private outgoing: ElasticBuffer = new ElasticBuffer();\n\n    constructor(private readonly encoding: BufferEncoding) {}\n\n    bind(\n        name: string,\n        portal: string,\n        format: DataFormat | DataFormat[] = DataFormat.Binary,\n        values: any[] = [],\n        types: DataType[] = [],\n    ) {\n        // We silently ignore any mismatch here, assuming that the\n        // query will fail and make the error evident.\n        const length = Math.min(types.length, values.length);\n\n        const segments: Segment[] = [\n            makeBufferSegment(portal, this.encoding, true),\n            makeBufferSegment(name, this.encoding, true),\n            [SegmentType.Int16BE, length],\n        ];\n\n        const getFormat =\n            typeof format === 'number' ?\n                () => format\n            :   (i: number) => format[i];\n\n        for (let i = 0; i < length; i++) {\n            segments.push([SegmentType.Int16BE, getFormat(i)]);\n        }\n\n        segments.push([SegmentType.Int16BE, length]);\n\n        const add = (message: SegmentType, value: SegmentValue) => {\n            segments.push([message, value]);\n            return getSegmentSize(message, value);\n        };\n\n        const reserve = (message: SegmentType) => {\n            const segment: Segment = [message, null];\n            segments.push(segment);\n            return (value: SegmentValue) => {\n                segment[1] = value;\n            };\n        };\n\n        const addBinaryValue = (value: any, dataType: DataType): number => {\n            let size = -1;\n            const setSize = reserve(SegmentType.Int32BE);\n\n            if (value === null) {\n                setSize(-1);\n                return 0;\n            }\n\n            switch (dataType) {\n                case DataType.Bool: {\n                    size = add(SegmentType.Int8, value ? 1 : 0);\n                    break;\n                }\n                case DataType.Date: {\n                    if (value === infinity) {\n                        size = add(SegmentType.Int32BE, 0x7fffffff);\n                    } else if (value === -infinity) {\n                        size = add(SegmentType.Int32BE, -0x80000000);\n                    } else if (value instanceof Date) {\n                        size = add(\n                            SegmentType.Int32BE,\n                            (value.getTime() - timeshift) / (1000 * 86400),\n                        );\n                    }\n                    break;\n                }\n                case DataType.Timestamp:\n                case DataType.Timestamptz: {\n                    if (value === infinity) {\n                        size = sum(\n                            add(SegmentType.UInt32BE, 0x7fffffff),\n                            add(SegmentType.UInt32BE, 0xffffffff),\n                        );\n                    } else if (value === -infinity) {\n                        size = sum(\n                            add(SegmentType.UInt32BE, 0x80000000),\n                            add(SegmentType.UInt32BE, 0x00000000),\n                        );\n                    } else if (value instanceof Date) {\n                        const n = (value.getTime() - timeshift) * 1000;\n                        const f = Math.floor(n / 4294967296);\n                        const r = n - f * 4294967296;\n                        size = sum(\n                            add(SegmentType.Int32BE, f),\n                            add(SegmentType.UInt32BE, r),\n                        );\n                    }\n                    break;\n                }\n                case DataType.Bpchar:\n                case DataType.Bytea:\n                case DataType.Char:\n                case DataType.Name:\n                case DataType.Text:\n                case DataType.Varchar: {\n                    if (value instanceof Buffer) {\n                        size = add(SegmentType.Buffer, value);\n                    } else {\n                        const s = String(value);\n                        size = add(\n                            SegmentType.Buffer,\n                            makeBuffer(s, this.encoding),\n                        );\n                    }\n                    break;\n                }\n                case DataType.Float4: {\n                    size = add(SegmentType.Float4, Number(value));\n                    break;\n                }\n                case DataType.Float8: {\n                    size = add(SegmentType.Float8, Number(value));\n                    break;\n                }\n                case DataType.Int2: {\n                    size = add(SegmentType.Int16BE, Number(value));\n                    break;\n                }\n                case DataType.Int4:\n                case DataType.Oid: {\n                    size = add(SegmentType.Int32BE, Number(value));\n                    break;\n                }\n                case DataType.Int8: {\n                    size = add(\n                        SegmentType.Int64BE,\n                        value instanceof Buffer ? value.readBigInt64BE(0)\n                        : typeof value === 'bigint' ? value\n                        : Number(value),\n                    );\n                    break;\n                }\n                case DataType.Point: {\n                    if (isPoint(value)) {\n                        size = sum(\n                            add(SegmentType.Float8, value.x),\n                            add(SegmentType.Float8, value.y),\n                        );\n                    }\n                    break;\n                }\n                case DataType.Jsonb:\n                    const body = JSON.stringify(value);\n                    add(SegmentType.Int8, 0x01);\n                    size =\n                        1 +\n                        add(\n                            SegmentType.Buffer,\n                            makeBuffer(body, this.encoding),\n                        );\n                    break;\n                case DataType.Json: {\n                    const body = JSON.stringify(value);\n                    size = add(\n                        SegmentType.Buffer,\n                        makeBuffer(body, this.encoding),\n                    );\n                    break;\n                }\n                case DataType.Uuid: {\n                    try {\n                        if (typeof value === 'string') {\n                            const buffer = parseUuid(value);\n                            size = add(SegmentType.Buffer, buffer);\n                        }\n                    } catch (error) {\n                        throw new Error(`Invalid UUID: ${value} (${error})`);\n                    }\n                    break;\n                }\n                default: {\n                    const innerDataType = arrayDataTypeMapping.get(dataType);\n                    if (innerDataType && value instanceof Array) {\n                        size = addBinaryArray(value, innerDataType);\n                    } else {\n                        throw new Error(`Unsupported data type: ${dataType}`);\n                    }\n                }\n            }\n\n            setSize(size);\n            return size;\n        };\n\n        const addBinaryArray = (value: any[], dataType: DataType): number => {\n            const setDimCount = reserve(SegmentType.Int32BE);\n            add(SegmentType.Int32BE, 1);\n            add(SegmentType.Int32BE, dataType);\n\n            let bytes = 12;\n            let dimCount = 0;\n\n            const go = (level: number, value: any[]) => {\n                const length = value.length;\n                if (length === 0) return;\n\n                if (level === dimCount) {\n                    bytes += sum(\n                        add(SegmentType.Int32BE, length),\n                        add(SegmentType.Int32BE, 1),\n                    );\n                    dimCount++;\n                }\n\n                for (let i = 0; i < length; i++) {\n                    const v = value[i];\n                    if (v instanceof Array) {\n                        go(level + 1, v);\n                    } else {\n                        bytes += addBinaryValue(v, dataType) + 4;\n                    }\n                }\n            };\n\n            go(0, value);\n            setDimCount(dimCount);\n            return bytes;\n        };\n\n        const getTextFromValue = (\n            value: any,\n            dataType: DataType,\n        ): null | string | string[] => {\n            if (value === null) return null;\n\n            switch (dataType) {\n                case DataType.Bool:\n                    return value ? 't' : 'f';\n                case DataType.Int2:\n                case DataType.Int4:\n                case DataType.Int8:\n                case DataType.Oid:\n                case DataType.Float4:\n                case DataType.Float8:\n                    if (typeof value === 'number') {\n                        return value.toString();\n                    }\n                    break;\n                case DataType.Bpchar:\n                case DataType.Bytea:\n                case DataType.Char:\n                case DataType.Name:\n                case DataType.Text:\n                case DataType.Varchar:\n                    return (\n                        typeof value === 'string' ? value\n                        : value instanceof Buffer ?\n                            value.toString(this.encoding)\n                        :   value.toString()\n                    );\n                case DataType.Date:\n                    return value instanceof Date ?\n                            dateToStringUTC(value, false)\n                        :   value.toString();\n                case DataType.Timestamp:\n                case DataType.Timestamptz:\n                    return value instanceof Date ?\n                            dateToStringUTC(value, true)\n                        :   value.toString();\n                case DataType.Jsonb:\n                case DataType.Json:\n                    return JSON.stringify(value);\n                default: {\n                    const innerDataType = arrayDataTypeMapping.get(dataType);\n                    if (innerDataType) {\n                        if (value instanceof Array) {\n                            return getTextFromArray(value, innerDataType);\n                        }\n                    }\n                    throw new Error(`Unsupported data type: ${dataType}`);\n                }\n            }\n\n            return null;\n        };\n\n        const getTextFromArray = (\n            value: any[],\n            dataType: DataType,\n        ): string[] => {\n            const strings: string[] = [];\n            strings.push('{');\n            const escape = (s: string) => {\n                return s\n                    .replace(/\\\\/gu, '\\\\\\\\')\n                    .replace(/\"/gu, '\\\\\"')\n                    .replace(/,/gu, '\\\\,');\n            };\n            for (let i = 0; i < value.length; i++) {\n                if (i > 0) strings.push(',');\n                const child = value[i];\n                const result =\n                    child instanceof Array ?\n                        getTextFromArray(child, dataType)\n                    :   getTextFromValue(child, dataType);\n                if (result instanceof Array) {\n                    strings.push(...result);\n                } else {\n                    strings.push(result === null ? 'null' : escape(result));\n                }\n            }\n            strings.push('}');\n            return strings;\n        };\n\n        for (let i = 0; i < length; i++) {\n            const value = values[i];\n            const dataType = types[i];\n            const format = getFormat(i);\n            if (format === DataFormat.Binary) {\n                addBinaryValue(value, dataType);\n            } else {\n                const result = getTextFromValue(value, dataType);\n                const setSize = reserve(SegmentType.Int32BE);\n                const size =\n                    result instanceof Array ?\n                        sum(\n                            ...result.map((s: string) =>\n                                add(\n                                    SegmentType.Buffer,\n                                    makeBuffer(s, this.encoding),\n                                ),\n                            ),\n                        )\n                    :   add(\n                            SegmentType.Buffer,\n                            result === null ? nullBuffer : (\n                                makeBuffer(result, this.encoding)\n                            ),\n                        );\n                setSize(size);\n            }\n        }\n\n        add(SegmentType.Int16BE, 1);\n        add(SegmentType.Int16BE, 1);\n\n        this.enqueue(Command.Bind, segments);\n    }\n\n    close(name: string, kind: 'S' | 'P') {\n        this.enqueue(Command.Close, [\n            makeBufferSegment(kind + name, this.encoding, true),\n        ]);\n    }\n\n    describe(name: string, kind: 'S' | 'P') {\n        this.enqueue(Command.Describe, [\n            makeBufferSegment(kind + name, this.encoding, true),\n        ]);\n    }\n\n    execute(portal: string, limit = 0) {\n        this.enqueue(Command.Execute, [\n            makeBufferSegment(portal, this.encoding, true),\n            [SegmentType.Int32BE, limit],\n        ]);\n    }\n\n    end() {\n        this.enqueue(Command.End, []);\n    }\n\n    flush() {\n        this.enqueue(Command.Flush, []);\n    }\n\n    parse(name: string, text: string, types: DataType[] = []) {\n        const length = types.length;\n        const segments: Segment[] = [\n            makeBufferSegment(name, this.encoding, true),\n            makeBufferSegment(text, this.encoding, true),\n            [SegmentType.Int16BE, length],\n        ];\n        for (let i = 0; i < length; i++) {\n            segments.push([SegmentType.Int32BE, types[i]]);\n        }\n        this.enqueue(Command.Parse, segments);\n    }\n\n    password(text: string) {\n        this.enqueue(Command.Password, [\n            makeBufferSegment(text, this.encoding, true),\n        ]);\n    }\n\n    saslInitialResponse(mechanism: string, clientNonce: string) {\n        if (mechanism !== 'SCRAM-SHA-256') return false;\n        const response = Buffer.from('n,,n=*,r=' + clientNonce);\n        this.enqueue(SASL.SASLResponse, [\n            makeBufferSegment(mechanism, this.encoding, true),\n            [SegmentType.Int32BE, response.length],\n            [SegmentType.Buffer, response],\n        ]);\n        return true;\n    }\n\n    saslResponse(data: string, password: string, clientNonce: string) {\n        const [response, signature] = sign(data, password, clientNonce);\n        this.enqueue(SASL.SASLResponse, [\n            makeBufferSegment(response, this.encoding, false),\n        ]);\n        return signature;\n    }\n\n    saslFinal(data: string, serverSignature: string) {\n        if (\n            !data.split(',').find((attr) => {\n                if (attr[0] === 'v') {\n                    return attr.substr(2) === serverSignature;\n                }\n                return false;\n            })\n        )\n            throw new Error('SASL server signature does not match');\n    }\n\n    send(socket: Socket) {\n        if (this.outgoing.empty) return;\n        const buffer = this.outgoing.consume();\n        if (buffer) {\n            return socket.write(buffer, () => this.outgoing.offer(buffer));\n        }\n        return true;\n    }\n\n    startup(settings: StartupConfiguration) {\n        const data: string[] = [];\n        const options = {\n            user: settings.user,\n            database: settings.database,\n            client_encoding: this.encoding,\n            client_min_messages: settings.clientMinMessages,\n            default_table_access_method: settings.defaultTableAccessMethod,\n            default_tablespace: settings.defaultTablespace,\n            default_transaction_isolation: settings.defaultTransactionIsolation,\n            extra_float_digits: settings.extraFloatDigits,\n            idle_in_transaction_session_timeout:\n                settings.idleInTransactionSessionTimeout,\n            idle_session_timeout: settings.idleSessionTimeout,\n            lock_timeout: settings.lockTimeout,\n            search_path: settings.searchPath,\n            statement_timeout: settings.statementTimeout,\n        };\n\n        for (const [k, v] of Object.entries(options)) {\n            if (v !== undefined && v !== '') {\n                data.push(k);\n                data.push(String(v));\n            }\n        }\n        data.push('');\n\n        const segments: Segment[] = [\n            [SegmentType.Int16BE, 3],\n            [SegmentType.Int16BE, 0],\n        ];\n\n        for (const s of data) {\n            segments.push(makeBufferSegment(s, this.encoding, true));\n        }\n\n        this.enqueue(null, segments);\n    }\n\n    startupSSL() {\n        const segments: Segment[] = [\n            [SegmentType.Int16BE, 0x04d2],\n            [SegmentType.Int16BE, 0x162f],\n        ];\n        this.enqueue(null, segments);\n    }\n\n    sync() {\n        this.enqueue(Command.Sync, []);\n    }\n\n    private enqueue(code: number | null, segments: Segment[]) {\n        const size = getMessageSize(code, segments);\n\n        // Allocate space and write segments.\n        const buffer = this.outgoing.getBuffer(size);\n        writeMessageInto(code, segments, buffer);\n    }\n}\n"]}