/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { Buffer } from 'node:buffer';
import { Socket } from 'node:net';
import { Writable } from 'node:stream';
import { postgresqlErrorCodes } from './errors.js';
import { BufferEncoding, DataFormat, DataType, ValueTypeReader } from './types.js';
export declare const enum Command {
    Bind = 66,
    Close = 67,
    Describe = 68,
    End = 88,
    Execute = 69,
    Flush = 72,
    Parse = 80,
    Password = 112,
    Query = 81,
    Sync = 83
}
export declare const enum SASL {
    SASLResponse = 112
}
export declare const enum ErrorLevel {
    Debug1 = "DEBUG1",
    Debug2 = "DEBUG2",
    Debug3 = "DEBUG3",
    Debug4 = "DEBUG4",
    Debug5 = "DEBUG5",
    Error = "ERROR",
    Fatal = "FATAL",
    Log = "LOG",
    Notice = "NOTICE",
    Panic = "PANIC"
}
export declare const enum Message {
    Authentication = 82,
    BackendKeyData = 75,
    BindComplete = 50,
    CloseComplete = 51,
    CommandComplete = 67,
    EmptyQueryResponse = 73,
    ErrorResponse = 69,
    NoData = 110,
    Notice = 78,
    NotificationResponse = 65,
    ParseComplete = 49,
    ParameterDescription = 116,
    ParameterStatus = 83,
    ReadyForQuery = 90,
    RowData = 68,
    RowDescription = 84
}
export declare const enum SSLResponseCode {
    Supported = 83,
    NotSupported = 78
}
export declare const enum TransactionStatus {
    Idle = 73,
    InTransaction = 84,
    InError = 69
}
export type SegmentValue = Buffer | bigint | number | null | string;
export type Segment = [SegmentType, SegmentValue];
export declare const enum SegmentType {
    Buffer = 0,
    Float4 = 1,
    Float8 = 2,
    Int8 = 3,
    Int16BE = 4,
    Int32BE = 5,
    Int64BE = 6,
    UInt32BE = 7
}
export interface RowDescription {
    columns: Uint32Array;
    names: string[];
}
export interface ClientConnectionOptions {
    user: string;
    clientEncoding: BufferEncoding;
}
export interface ClientConnectionDefaults {
    database: string;
    clientMinMessages: Uppercase<keyof typeof ErrorLevel>;
    defaultTableAccessMethod: string;
    defaultTablespace: string;
    defaultTransactionIsolation: string;
    extraFloatDigits: number;
    idleInTransactionSessionTimeout: number;
    idleSessionTimeout: number;
    lockTimeout: number;
    searchPath: string;
    statementTimeout: number;
}
export type StartupConfiguration = Omit<ClientConnectionOptions, 'clientEncoding'> & Partial<ClientConnectionDefaults>;
export declare class DatabaseError extends Error {
    level: ErrorLevel;
    code: keyof typeof postgresqlErrorCodes;
    message: string;
    constructor(level: ErrorLevel, code: keyof typeof postgresqlErrorCodes, message: string);
}
export type Receive = (buffer: Buffer, offset: number, size: number) => number;
export declare function readRowDescription(buffer: Buffer, start: number, types?: ReadonlyMap<DataType, ValueTypeReader>): {
    columns: Uint32Array;
    names: string[];
};
export declare function readRowData(buffer: Buffer, row: Array<any>, columnSpecification: Uint32Array, encoding: BufferEncoding, bigints: boolean, types?: ReadonlyMap<DataType, ValueTypeReader>, streams?: ReadonlyArray<Writable | null>): number;
export declare function writeMessage(code: number | null, segments: Segment[]): Buffer;
export declare class Reader {
    private readonly buffer;
    private start;
    private end?;
    constructor(buffer: Buffer, start: number, end?: number | undefined);
    readInt32BE(): number;
    readCString(encoding: BufferEncoding): string;
    readRowData(row: any[], columnSpecification: Uint32Array, encoding: BufferEncoding, bigints: boolean, types?: ReadonlyMap<DataType, ValueTypeReader>, streams?: ReadonlyArray<Writable | null>): number;
    readRowDescription(types?: ReadonlyMap<DataType, ValueTypeReader>): {
        columns: Uint32Array;
        names: string[];
    };
}
export declare class Writer {
    private readonly encoding;
    private outgoing;
    constructor(encoding: BufferEncoding);
    bind(name: string, portal: string, format?: DataFormat | DataFormat[], values?: any[], types?: DataType[]): void;
    close(name: string, kind: 'S' | 'P'): void;
    describe(name: string, kind: 'S' | 'P'): void;
    execute(portal: string, limit?: number): void;
    end(): void;
    flush(): void;
    parse(name: string, text: string, types?: DataType[]): void;
    password(text: string): void;
    saslInitialResponse(mechanism: string, clientNonce: string): boolean;
    saslResponse(data: string, password: string, clientNonce: string): string;
    saslFinal(data: string, serverSignature: string): void;
    send(socket: Socket): boolean | undefined;
    startup(settings: StartupConfiguration): void;
    startupSSL(): void;
    sync(): void;
    private enqueue;
}
