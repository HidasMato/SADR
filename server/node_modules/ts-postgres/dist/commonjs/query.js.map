{"version":3,"file":"query.js","sourceRoot":"","sources":["../../src/query.ts"],"names":[],"mappings":"","sourcesContent":["import { Writable } from 'node:stream';\nimport { DataFormat, DataType } from './types.js';\n\nexport interface QueryOptions {\n    /** The query name. */\n    readonly name: string;\n    /** Whether to use the default portal (i.e. unnamed) or provide a name. */\n    readonly portal: string;\n    /** Allows making the database native type explicit for some or all columns. */\n    readonly types: DataType[];\n    /** Whether column data should be transferred using text or binary mode. */\n    readonly format: DataFormat | DataFormat[];\n    /** A mapping from column name to a socket, e.g. an open file. */\n    readonly streams: Record<string, Writable>;\n    /** Allows the transformation of column names as returned by the database. */\n    readonly transform: (name: string) => string;\n    /** Use bigint for the INT8 (64-bit integer) data type. */\n    readonly bigints: boolean;\n}\n\n/**\n * A query parameter can be used in place of a query text as the first argument\n * to the {@link Client.query} method.\n * @interface\n */\nexport type Query = Partial<QueryOptions> & { text: string };\n"]}